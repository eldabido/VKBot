import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import requests
from bs4 import BeautifulSoup
import json

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
def create_keyboard(buttons):
    keyboard = VkKeyboard(one_time=False)
    for i, button in enumerate(buttons):
        if i > 0 and i % 2 == 0:
            keyboard.add_line()
        keyboard.add_button(button['label'], color=button['color'])
    return keyboard.get_keyboard()

# –§—É–Ω–∫—Ü–∏—è, —Å–æ–∫—Ä–∞—â–∞—é—â–∞—è —Ç–µ–∫—Å—Ç –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤ (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ).
def shorten_text(text, max_length=40):
    if len(text) > max_length:
        return text[:max_length - 3] + "..."
    return text

# –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â–∞—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.
def get_vk_courses():
    try:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é requests –∏ BeautifulSoup.
        url = "https://education.vk.company/students"
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        script_tag = soup.find("script", id="__NEXT_DATA__")
        if not script_tag:
            return ["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö."]
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ json –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
        data = json.loads(script_tag.string)
        courses = data.get("props", {}).get("pageProps", {}).get("page", {}).get("programs", [])

        result = []
        for course in courses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å –æ—Ç–∫—Ä—ã—Ç.
            if course.get("selection_status") == "open":
                name = course.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                description = course.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                format_ = course.get("format", "–§–æ—Ä–º–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω")
                result.append(f"üìå {name}\n{description}\n–§–æ—Ä–º–∞—Ç: {format_}\n")

        return result if result else ["–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."]
    except Exception as e:
        return [f"Error with courses: {str(e)}"]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.
def get_faq_data():
    try:
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å–∞–π—Ç–∞.
        url = "https://education.vk.company/students"
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        script_tag = soup.find("script", id="__NEXT_DATA__")
        if not script_tag:
            return False

        data = json.loads(script_tag.string)
        questions = data.get("props", {}).get("pageProps", {}).get("page", {}).get("questions", [])

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é FAQ
        menu = []
        answers = {}

        for q in questions:
            question_text = q['question']
            short_question = shorten_text(question_text)
            menu.append({'label': short_question, 'color': VkKeyboardColor.SECONDARY})
            answers[short_question] = f"‚ùì –í–æ–ø—Ä–æ—Å: {question_text}\n\n{q['answer']}"

        menu.append({'label': '–ù–∞–∑–∞–¥', 'color': VkKeyboardColor.NEGATIVE})

        return menu, answers
    except Exception as e:
        print(f"Error with FAQ: {str(e)}")
        return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã VK Education Projects.
def get_projects():
    try:
        # URL API —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏.
        api_url = "https://store.tildaapi.com/api/getproductslist/?storepartuid=357127554781&recid=754421136&getparts=true&getoptions=true&slice=1&sort[created]=desc&size=9"

        # GET.
        response = requests.get(api_url)
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ JSON.
        data = response.json()
        projects = data.get('products', [])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã.
        formatted_projects = []
        for project in projects:
            title = project.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            direction = next(
                (ch['value'] for ch in project.get('characteristics', [])
                 if ch.get('title') == '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'),
                '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            )
            duration = next(
                (ch['value'] for ch in project.get('characteristics', [])
                 if ch.get('title') == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã'),
                '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            )
            description = project.get('descr', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

            formatted_projects.append(
                f"üîπ {title}\n"
                f"üìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
                f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
                f"üìù {description}\n"
            )

        return formatted_projects if formatted_projects else ["–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]

    except Exception as e:
        return [f"Error with projects: {str(e)}"]

# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
def write_message(sender, message, keyboard=None):
    params = {
        'user_id': sender,
        'message': message,
        'random_id': get_random_id()
    }
    if keyboard:
        params['keyboard'] = keyboard

    authorize.method('messages.send', params)

# –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.
faq_menu = []
faq_answers = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
main_menu = [
    {'label': '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', 'color': VkKeyboardColor.PRIMARY},
    {'label': '–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤', 'color': VkKeyboardColor.POSITIVE},
    {'label': '–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç—ã', 'color': VkKeyboardColor.POSITIVE}
]

# –ú–µ–Ω—é –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç—ã.
projects_menu = [
    {'label': '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?', 'color': VkKeyboardColor.PRIMARY},
    {'label': '–ß—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–µ–∫—Ç–∞?', 'color': VkKeyboardColor.PRIMARY},
    {'label': '–ü—Ä–æ —Å—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤', 'color': VkKeyboardColor.PRIMARY},
    {'label': '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤', 'color': VkKeyboardColor.PRIMARY},
    {'label': '–ù–∞–∑–∞–¥', 'color': VkKeyboardColor.NEGATIVE}
]


# –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ –æ—Ç–≤–µ—Ç—ã.
faq_menu, faq_answers = get_faq_data()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
token = "here is your bot token"
authorize = vk_api.VkApi(token=token)
longpoll = VkLongPoll(authorize)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        sender = event.user_id
        received_message = event.text

        if received_message.lower() == "–ø—Ä–∏–≤–µ—Ç":
            write_message(sender,
                          "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                          create_keyboard(main_menu))

        elif received_message.lower() == "–ø–æ–∫–∞":
            write_message(sender, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

        elif received_message == "–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤":
            courses = get_vk_courses()
            response = "üìö –û—Ç–∫—Ä—ã—Ç—ã–µ –∫—É—Ä—Å—ã VK Education:\n" + "\n".join(courses)
            write_message(sender, response, create_keyboard(main_menu))

        elif received_message == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            if not faq_menu:
                faq_menu, faq_answers = get_faq_data()

            if faq_menu:
                write_message(sender,
                              "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
                              create_keyboard(faq_menu))
            else:
                write_message(sender,
                              "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã.",
                              create_keyboard(main_menu))
        elif received_message == "–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç—ã":
            write_message(sender,
                          "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
                          create_keyboard(projects_menu))
        elif received_message == "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?":
            write_message(sender,
                          "–ù–∞ –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–∞–º –Ω—É–∂–Ω–æ, –∫–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞. " +
                          "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤. " +
                          "–î–∞–ª–µ–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É. (https://education.vk.company/education_projects)",
                          create_keyboard(projects_menu))
        elif received_message == "–ß—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–µ–∫—Ç–∞?":
            write_message(sender,
                          "–§–æ—Ä–º–∞—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
                          create_keyboard(projects_menu))
        elif received_message == "–ü—Ä–æ —Å—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤":
            write_message(sender,
                          "–°—Ä–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏ –∏ –í–∞—à–∏—Ö —Ü–µ–ª–µ–π.",
                          create_keyboard(projects_menu))
        elif received_message == "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤":
            projects = get_projects()
            response = "üìö –û—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã VK Education:\n" + "\n".join(projects)
            write_message(sender, response, create_keyboard(projects_menu))
        elif received_message == "–ù–∞–∑–∞–¥":
            write_message(sender,
                          "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                          create_keyboard(main_menu))

        elif received_message in faq_answers:
            answer = faq_answers[received_message]
            if len(answer) > 4096:
                answer = answer[:4000] + "...\n\n(—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
            write_message(sender, answer, create_keyboard(faq_menu))

        else:
            write_message(sender,
                          "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é. –ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å" +
                          ", —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ VK Education: https://education.vk.company/contacts ",
                          create_keyboard(main_menu))